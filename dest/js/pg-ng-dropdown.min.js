"use strict";!function(){function dropdownDirective($timeout,$document,$parse){function compile($element,attrs){return attrs.textProperty=attrs.textProperty||"text",attrs.imageProperty=attrs.imageProperty||"image",attrs.valueProperty=attrs.valueProperty||"value",{post:postLink}}function controller($scope){function selectOption(_index){if(_index!==parseInt($scope.selectedOption)){var _pastSelected=$scope.selectedOption;_index=parseInt(_index),$scope.selectedOption=_index,$scope.model=$scope.data[$scope.selectedOption][$scope.valueProperty],$scope.onchange(),$scope.$broadcast("pg-option-selected",{index:_index,pastIndex:_pastSelected})}}function toggle(){$scope.opened?($scope.opened=!1,$scope.$broadcast("pg-close-dropdown")):$scope.disabled()||($scope.opened=!0,$scope.$broadcast("pg-open-dropdown"))}function open(){$scope.disabled()||($scope.opened=!0,$scope.$broadcast("pg-open-dropdown"))}function close(){$scope.opened=!1,$scope.$broadcast("pg-close-dropdown")}$scope.opened=!1,$scope.currentOption=-1,$scope.selectedOption,$scope.selectOption=selectOption,$scope.open=open,$scope.close=close,$scope.toggle=toggle,"undefined"===$scope.disabled()&&($scope.disabled=function(){return!1}),$scope.$watch("data",function(){$scope.$broadcast("options-changed")}),$scope.model&&$scope.data.forEach(function(opt,i){opt[$scope.valueProperty]==$scope.model&&($scope.selectedOption=i)})}function postLink($scope,$element,attrs){function select($evt,data){options.eq(data.index).addClass(selectedClass),options.eq(data.pastIndex).removeClass(selectedClass)}function open(){$element.addClass(openedClass),$scope.dynamicHeight&&$element.css("height",openedHeight+"px")}function close(){$element.removeClass(openedClass),$scope.currentOption>0&&(options.eq($scope.currentOption).removeClass("focused"),$scope.currentOption=-1),$scope.dynamicHeight&&$element.css("height",closedHeight+"px")}function elementClick(evt){evt.stopPropagation()}function selectEvt($evt,data){$scope.name===data.name&&$scope.$apply(function(){$scope.selectOption(data.index)})}function openEvt($evt,data){$scope.name===data.name&&$scope.open()}function closeEvt($evt,data){$scope.name===data.name&&$scope.close()}function keydown(evt){var _code=evt.keyCode||evt.which;13===_code?(evt.preventDefault(),$scope.opened?$scope.opened&&-1!=$scope.currentOption&&$scope.currentOption!=$scope.selectedOption&&$scope.$apply(function(){$scope.selectOption($scope.currentOption)}):$scope.open()):27===_code?(evt.preventDefault(),$scope.opened&&$scope.close()):38===_code?(evt.preventDefault(),$scope.currentOption-1>=0&&(options.eq($scope.currentOption).removeClass("focused"),$scope.currentOption--,options.eq($scope.currentOption).addClass("focused"),$scope.currentOption<options.length&&(optionsWrapper[0].scrollTop-=optionHeight))):40===_code&&(evt.preventDefault(),$scope.currentOption+1<options.length&&(options.eq($scope.currentOption).removeClass("focused"),$scope.currentOption++,options.eq($scope.currentOption).addClass("focused"),$scope.currentOption>1&&(optionsWrapper[0].scrollTop+=optionHeight)))}function measureHeight(){var _style=window.getComputedStyle(optionsWrapper[0]),_padding=parseInt(_style.paddingTop)+parseInt(_style.paddingBottom),_margin=parseInt(_style.marginTop)+parseInt(_style.marginBottom);closedHeight=$element.prop("offsetHeight"),openedHeight=optionHeight*options.length+closedHeight+_padding+_margin}function destroy(){$document.off("click"),$open(),$close(),$select(),$optionsChanged(),$closeThis(),$openThis(),$selectThis()}var optionsWrapper,options,optionHeight,closedHeight,openedHeight,openedClass="opened",selectedClass="selected";if($scope.openedClass)var openedClass=$scope.openedClass;if($scope.selectedClass)var selectedClass=$scope.selectedClass;var $open=$scope.$on("pg-open-dropdown",open),$close=$scope.$on("pg-close-dropdown",close),$openThis=$scope.$on("pg-dropdown-open",openEvt),$closeThis=$scope.$on("pg-dropdown-close",closeEvt),$selectThis=$scope.$on("pg-select-option",selectEvt),$optionsChanged=$scope.$on("pg-options-changed",measureHeight),$select=$scope.$on("pg-option-selected",function($evt,data){select($evt,data),$scope.close()});$element.on("click",elementClick),$document.on("click",$scope.close),$element.on("keydown",keydown),$scope.$on("$destroy",destroy),$timeout(function(){optionsWrapper=$element.find("ul"),options=optionsWrapper.find("li"),options.eq($scope.selectedOption).addClass(selectedClass),optionHeight=options.eq(0).prop("offsetHeight"),$scope.dynamicHeight&&measureHeight()})}var template=['<div class="pg-dropdown" data-ng-class="{\'disabled\': disabled()}">','<div data-ng-click="toggle()" class="current-selected-option">',"<i data-ng-if=\"image == 'true'\" data-ng-style=\"{'background-image': 'url('+(data[selectedOption][imageProperty])+')'}\">","</i>",'<span data-ng-bind="data[selectedOption][textProperty] || emptyText">',"</span>",'<div class="arrow-wrapper">','<div class="arrow"></div>',"</div>",'<div style="clear:both;"></div>',"</div>",'<ul class="dropdown-content">','<li data-ng-click="selectOption($index)" data-ng-repeat="option in data" title="{{option[textProperty]}}" >',"<i data-ng-if=\"image == 'true'\" data-ng-style=\"{'background-image': 'url('+(option[imageProperty])+')'}\">","</i>",'<span data-ng-bind="option[textProperty]">',"</span>",'<div style="clear:both;"></div>',"</li>","</ul>","</div>"].join(""),directive={scope:{data:"=options",model:"=",image:"@imageOptions",emptyText:"@",name:"@",imageProperty:"@",textProperty:"@",valueProperty:"@",openedClass:"@",selectedClass:"@",dynamicHeight:"@",disabled:"&",onchange:"&"},restrict:"AEC",compile:compile,controller:controller,replace:!0,template:template};return directive}angular.module("pg-ng-dropdown",[]).directive("pgNgDropdown",dropdownDirective),dropdownDirective.$inject=["$timeout","$document","$parse"]}();